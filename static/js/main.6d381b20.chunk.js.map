{"version":3,"sources":["serviceWorker.js","DisplayMessages.js","index.js"],"names":["Boolean","window","location","hostname","match","store","createStore","state","action","type","message","DisplayMessages","props","input","handleChange","bind","submitMessage","event","this","setState","target","value","submitNewMessage","list","messages","map","x","key","onChange","onKeyUp","autoFocus","onClick","React","Component","Container","connect","dispatch","addMessage","AppWrapper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uECQAC,EAAQC,aAZS,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC7C,OAAQA,EAAOC,MACb,IAXQ,MAYN,MAAM,GAAN,mBACKF,GADL,CAEEC,EAAOE,UAEX,QACE,OAAOH,MAOPI,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDL,MAAQ,CACXM,MAAO,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAPJ,E,0EASNE,GACXC,KAAKC,SAAS,CACZN,MAAOI,EAAMG,OAAOC,U,sCAItBH,KAAKC,SAAS,CACZN,MAAO,KAGTK,KAAKN,MAAMU,iBAAiBJ,KAAKX,MAAMM,S,+BAE/B,IAAD,OACHU,EAAOL,KAAKN,MAAMY,SAASC,KAAI,SAAAC,GAAC,OAAI,wBAAIC,IAAKD,EAAI,GAAIA,MACzD,OACE,6BACE,sDACA,2BAAOjB,KAAK,OACVY,MAAOH,KAAKX,MAAMM,MAClBe,SAAUV,KAAKJ,aACfe,QAAS,SAAAZ,GACW,UAAdA,EAAMU,KAAmB,EAAKX,iBAEpCc,WAAS,IACX,4BAAQC,QAASb,KAAKF,eAAtB,UAGCO,O,GArCqBS,IAAMC,WAuD9BC,EAAYC,aAZM,SAAC5B,GACvB,MAAO,CAACiB,SAAUjB,MAGO,SAAC6B,GAC1B,MAAO,CACLd,iBAAkB,SAACZ,GACjB0B,EAxEa,SAAC1B,GAClB,MAAO,CACLD,KAJQ,MAKRC,QAASA,GAqEE2B,CAAW3B,QAKRyB,CAA6CxB,GAYhD2B,E,iLARX,OACE,kBAAC,IAAD,CAAUjC,MAAOA,GACf,kBAAC6B,EAAD,W,GAJiBF,IAAMC,WChF/BM,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SF2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6d381b20.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {createStore} from 'redux';\nimport {Provider,connect} from 'react-redux';\n\n// Redux:\nconst ADD = 'ADD';\n// action creator\nconst addMessage = (message) => {\n  return {\n    type: ADD,\n    message: message\n  }\n};\n\nconst messageReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD:\n      return [\n        ...state,\n        action.message\n      ];\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(messageReducer);\n\n// React:  ******************************************\nclass DisplayMessages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n      // messages: []    move messages from local state to Redux store props\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.submitMessage = this.submitMessage.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  submitMessage() {\n    this.setState({\n      input: ''\n      // messages: this.state.messages.concat(this.state.input) \n    });\n    this.props.submitNewMessage(this.state.input);\n  }\n  render() {\n    let list = this.props.messages.map(x => <li key={x + 1}>{x}</li>);\n    return (\n      <div>\n        <h2>Type in a new Message:</h2>\n        <input type='text'\n          value={this.state.input}\n          onChange={this.handleChange}\n          onKeyUp={event => {\n            if (event.key === 'Enter') { this.submitMessage() }\n          }}\n          autoFocus />\n        <button onClick={this.submitMessage}>\n          Submit\n        </button>\n        {list}\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {messages: state}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewMessage: (message) => {\n      dispatch(addMessage(message))\n    }\n  }\n};\n\nconst Container = connect(mapStateToProps, mapDispatchToProps)(DisplayMessages);\n\nclass AppWrapper extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Container/>\n      </Provider>\n    );\n  }\n};\n\nexport default AppWrapper;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppWrapper from './DisplayMessages';\n\nReactDOM.render(<AppWrapper />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}